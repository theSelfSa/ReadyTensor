Repository Architecture:
  Core Organization:
    basic_modular_organization:
      name: Basic Modular Organization
      description: Repository has basic organizational structure with some logical
        separation of files (not all files in root directory)
      essential: true
      professional: true
      elite: true
    organized_notebooks:
      name: Organized Notebooks
      description: If Jupyter notebooks are present, they are organized in a logical
        manner (e.g., in dedicated directories) with names that reflect their purpose
        and sequence (e.g., "01_data_exploration.ipynb", "02_feature_engineering.ipynb")
      essential: false
      professional: true
      elite: true
      instructions: If the repository does not contain any notebooks, this criterion should be scored 1.
    docs_refs_separation:
      name: Documentation and References Separation
      description: Documents and external materials such as pdfs, papers, etc. are
        properly organized in dedicated locations (e.g., docs/ directory)
      essential: false
      professional: true
      elite: true
      instructions: If the repository does not contain any documents, this criterion
        should be satisfied. It should score 0 only if there are documents scattered
        across the repository.
    asset_organization:
      name: Asset Organization
      description: Non-code assets (images, models, etc.) are organized in dedicated
        directories with clear purpose
      essential: false
      professional: true
      elite: true
      instructions: If the repository contains non-code directories such as `data` or `images`, this criterion should be satisfied.
    logical_repository_root:
      name: Logical Repository Root
      description: Repository root is clean with only essential files (README, license,
        .gitignore, setup files) with detailed content in subdirectories
      essential: false
      professional: true
      elite: true
      instructions: |
        The criterion is not restricted to the files mentioned above. 
        Files that are commonly placed in the root directory such as 
        .gitignore, README, LICENSE, Dockerfile, .env, venv, and requirements can exist in the root.
        The criterion should be scored 0 if there are any files in the root directory that are not essential and not commonly placed in the root directory.

    appropriate_gitignore:
      name: Appropriate .gitignore
      description: Repository includes a .gitignore file appropriate for the project
        type/language
      essential: true
      professional: true
      elite: true
    code_separation:
      name: Specific Code Separation
      description: Modeling/application code is organized in dedicated module structure
        (e.g., src/ directory with submodules)
      essential: false
      professional: true
      elite: true
    data_separation:
      name: Specific Data Separation
      description: Data is organized in dedicated directory (e.g., /data, /inputs,
        etc.)
      essential: false
      professional: true
      elite: true
    config_separation:
      name: Specific Config Separation
      description: Configuration is properly separated from code in dedicated files/directories
      essential: false
      professional: true
      elite: true
    test_directory_organized:
      name: Test Directory Structure
      description: Tests are organized in a dedicated structure 
      essential: false
      professional: true
      elite: true
    repository_size:
      name: Repository Size
      description: Repository size is reasonable and does not exceed 50MB
      essential: true
      professional: true
      elite: true
      based_on: custom_logic
      args:
        max_size: 50
      
  Naming Practices:
    consistent_file_dir_naming_convention:
      name: Consistent File and Dir Naming Convention
      description: Files and directories follow a single, consistent naming convention
        (snake_case, camelCase, etc.)
      essential: true
      professional: true
      elite: true
      instructions: 'Python files should be named in snake_case. Other files may have
        different naming conventions. For example Dockerfile and docker-compose.yml
        may not follow snake_case.

        Treat each file using the convention that is most appropriate for the file
        type.

        '
    descriptive_file_dir_naming:
      name: Descriptive File and Dir Naming
      description: Files and directories have descriptive names that clearly indicate
        their purpose or content (no generic names like notebook1.ipynb)
      essential: true
      professional: true
      elite: true
    unambiguous_related_items_naming:
      name: Unambiguous Related Item Naming
      description: Related files and directories use a consistent, clear naming scheme
        that avoids ambiguity (e.g., avoid "experiment.py", "experiment_new.py", "experiment_final.py"
        or "temp_models/", "models_new/", "final_models/")
      essential: true
      professional: true
      elite: true
  Directory Design:
    appropriate_directory_density:
      name: Appropriate Directory Density
      description: Directories contain a reasonable number of files and dirs (should
        be under 15 directories and files in single directories); does not apply to
        data directories
      essential: false
      professional: true
      elite: true
    reasonable_directory_depth:
      name: Reasonable Directory Depth
      description: Repository structure avoids excessive nesting of directories (typically
        no more than 5 levels deep)
      essential: false
      professional: true
      elite: true
    clear_entry_points:
      name: Clear Entry Points
      description: Main execution entry points are clearly identified (e.g., main.py,
        app.py, or documentation pointing to them)
      essential: true
      professional: true
      elite: true
      instructions: |
       Look for any main execution entry points such as main.py, app.py, server.py, start.py, launch.py, index.py, etc.
       The criterion is satisfied if there is at least one such entry point.
  Environment & Dependencies:
    environment_config_isolation:
      name: Environment Configuration Isolation
      description: Environment-specific configuration files (.env.example, docker-compose.yml, etc.) are properly placed and organized
      essential: false
      professional: true
      elite: true
      instructions: |
       Look for any environment-specific configuration files such as .env.example, docker-compose.yml, etc. that are used for the same purpose in the tree structure. If one is found, the criterion is satisfied.
    organized_dependency_management:
      name: Dependency Management Structure
      description: Package dependency files (requirements.txt, pyproject.toml, etc.)
        are properly placed at repository root or in designated dependency directories.
        Multiple dependency files (if present) follow logical organization (e.g.,
        base_requirements.txt, dev_requirements.txt).
      essential: false
      professional: true
      elite: true
      instructions: The presence of one file satisfies the criterion.

    secret_management:
      name: Secret Management
      description: Secrets are properly managed and stored in a secure manner.
      essential: true
      professional: true
      elite: true
      based_on: custom_logic
      
      
